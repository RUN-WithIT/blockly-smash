Blockly.Blocks.blaster={init:function(){this.appendDummyInput().appendField("Blaster").appendField(new Blockly.FieldTextInput("name"),"NAME"),this.appendValueInput("FILE").setCheck("String").setAlign(Blockly.ALIGN_RIGHT).appendField("csv file:"),this.appendValueInput("RAMP_RATE").setCheck("Array").setAlign(Blockly.ALIGN_RIGHT).appendField("Rate ramp (/sec)"),this.appendValueInput("STEP_DURATION").setCheck("Number").setAlign(Blockly.ALIGN_RIGHT).appendField("Step Duration (sec)"),this.appendValueInput("CLIENTS").setAlign(Blockly.ALIGN_RIGHT).setCheck("Number").appendField("Number of clients"),this.appendDummyInput(),this.appendDummyInput().appendField("Dequeue Callback: "),this.appendStatementInput("DEQUEUE_CALLBACK").setCheck(null),this.appendDummyInput().appendField("Progress Callback: "),this.appendStatementInput("PROGRESS_CALLBACK").setCheck(null),this.appendDummyInput().appendField("Blast Callback: "),this.appendStatementInput("BLAST_CALLBACK").setCheck(null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.flow={init:function(){this.appendDummyInput().appendField("Name:").appendField(new Blockly.FieldTextInput("do_flow"),"NAME"),this.appendStatementInput("Data").appendField("Data:").setCheck("Data"),this.appendStatementInput("Reaction").appendField("Reactions:").setCheck("Reaction"),this.appendDummyInput().appendField("Success Callback: "),this.appendStatementInput("SUCCESS_CALLBACK").setCheck(null),this.appendDummyInput().appendField("Fail Callback: "),this.appendStatementInput("FAIL_CALLBACK").setCheck(null),this.setColour(240),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.flow_data={init:function(){this.appendValueInput("FILE").setCheck(null).appendField("smash_data_add_file"),this.setPreviousStatement(!0,"Data"),this.setNextStatement(!0,"Data"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.predefined_procedures={init:function(){this.setColour(230),this.itemCount_=1,this.setInputsInline(!0),this.appendDummyInput().appendField(new Blockly.FieldTextInput("Function_name"),"NAME"),this.updateShape_(),this.setOutput(!0),this.setMutator(new Blockly.Mutator(["predefined_procedures_with_params"]))},mutationToDom:function(){var e=document.createElement("mutation");return e.setAttribute("args",this.itemCount_),e},domToMutation:function(e){this.itemCount_=parseInt(e.getAttribute("args"),10),this.updateShape_()},decompose:function(e){var t=e.newBlock("predefined_procedures_with_container");t.initSvg();for(var n=t.getInput("STACK").connection,o=0;o<this.itemCount_;o++){var a=e.newBlock("predefined_procedures_with_params");a.initSvg(),n.connect(a.previousConnection),n=a.nextConnection}return t},compose:function(e){for(var t=e.getInputTargetBlock("STACK"),n=[];t;)n.push(t.valueConnection_),t=t.nextConnection&&t.nextConnection.targetBlock();for(var o=0;o<this.itemCount_;o++){var a=this.getInput("ARG"+o).connection.targetConnection;a&&n.indexOf(a)==-1&&a.disconnect()}this.itemCount_=n.length,this.updateShape_();for(var o=0;o<this.itemCount_;o++)Blockly.Mutator.reconnect(n[o],this,"ARG"+o)},saveConnections:function(e){for(var t=e.getInputTargetBlock("STACK"),n=0;t;){var o=this.getInput("ARG"+n);t.valueConnection_=o&&o.connection.targetConnection,n++,t=t.nextConnection&&t.nextConnection.targetBlock()}},updateShape_:function(){this.itemCount_&&this.getInput("EMPTY")&&this.removeInput("EMPTY");for(var e=0;e<this.itemCount_;e++)if(!this.getInput("ARG"+e)){this.appendValueInput("ARG"+e)}for(;this.getInput("ARG"+e);)this.removeInput("ARG"+e),e++}},Blockly.Blocks.predefined_procedures_noreturn={init:function(){this.setColour(230),this.itemCount_=1,this.setInputsInline(!0),this.appendDummyInput().appendField(new Blockly.FieldTextInput("Function_name"),"NAME"),this.updateShape_(),this.setOutput(!1),this.setMutator(new Blockly.Mutator(["predefined_procedures_with_params"])),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null)},mutationToDom:Blockly.Blocks.predefined_procedures.mutationToDom,domToMutation:Blockly.Blocks.predefined_procedures.domToMutation,decompose:Blockly.Blocks.predefined_procedures.decompose,compose:Blockly.Blocks.predefined_procedures.compose,saveConnections:Blockly.Blocks.predefined_procedures.saveConnections,updateShape_:Blockly.Blocks.predefined_procedures.updateShape_},Blockly.Blocks.predefined_procedures_with_container={init:function(){this.setColour(230),this.appendDummyInput().appendField("Inputs"),this.appendStatementInput("STACK"),this.contextMenu=!1}},Blockly.Blocks.predefined_procedures_with_params={init:function(){this.setColour(230),this.appendDummyInput().appendField("Input"),this.setPreviousStatement(!0),this.setNextStatement(!0),this.contextMenu=!1}},Blockly.Blocks.reaction_add={init:function(){this.appendValueInput("FILE").setCheck(null).appendField("webui_add_reaction_file").appendField("File:"),this.appendValueInput("GOAL").setAlign(Blockly.ALIGN_RIGHT).setCheck(null).appendField("GOAL:"),this.setPreviousStatement(!0,"Reaction"),this.setNextStatement(!0,"Reaction"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.reaction_remove={init:function(){this.appendValueInput("FILE").setCheck(null).appendField("webui_remove_reaction").appendField("File:"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(240),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.reaction_do={init:function(){this.appendValueInput("FILE").setCheck(null).appendField("webui_do_reaction_file").appendField("File:"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(240),this.setTooltip(""),this.setHelpUrl("")}},Blockly.bash.blaster=function(e){var t=(e.getFieldValue("NAME"),Blockly.bash.valueToCode(e,"FILE",Blockly.bash.ORDER_ATOMIC)),n=Blockly.bash.valueToCode(e,"RAMP_RATE",Blockly.bash.ORDER_ATOMIC);n=n||[];var o=Blockly.bash.valueToCode(e,"STEP_DURATION",Blockly.bash.ORDER_ATOMIC),a=Blockly.bash.valueToCode(e,"CLIENTS",Blockly.bash.ORDER_ATOMIC),l=Blockly.bash.statementToCode(e,"DEQUEUE_CALLBACK"),s=Blockly.bash.statementToCode(e,"PROGRESS_CALLBACK"),i=Blockly.bash.statementToCode(e,"BLAST_CALLBACK"),c=["PORT=32000","CSVFILE="+t,"RAMP="+n.join(" "),"STEPDURATION="+o,"CLIENTS="+a,"SERVER=localhost","BASENAME=`basename $0`","sm_data_add_kv sessionname:$BASENAME",'sm_log INFO "${BASENAME} started"',"err_exit()"," {",'    sm_log ERROR "${BASENAME} has error on line $1"'," }","trap 'err_exit $LINENO' ERR","cleanup()"," {","    set -e",'    sm_log INFO "${BASENAME} done"'," }",'trap "cleanup" EXIT'],p=["#","# client","#","function blast-dq-cb()"," {","    REF=$1","    UDATA=$2",'    echo "blaster-dq-cb"',"    echo $# $*","    echo `sm_dataref_tostring $1`",'    echo ""',l,"  sleep 1","}"],r=["function start-client()"," {","     SEQ=$1","     sm_blaster_dq_open test $SERVER $PORT","     COUNT=0",'     trap "break" INT',"     while [ 1 ] ; do","     if [ $COUNT -eq 0 ] ; then",'        PAYLOAD="{stb_id:INJECTED}"','         RES=`sm_blaster_dq test 5 blast-dq-cb myudata-${SEQ} "${PAYLOAD}"`',' #       sm_blaster_dq test 5 blast-dq-cb myudata-${SEQ} "${PAYLOAD}"',"     else","         RES=`sm_blaster_dq test 5 blast-dq-cb myudata-${SEQ}`"," #       sm_blaster_dq test 5 blast-dq-cb myudata-${SEQ}","     fi","     COUNT=$((COUNT+1))","     done","     sm_blaster_dq_close test","     exit 0"," }","# start the client in forks that don't return","for i in `seq 1 $CLIENTS` ; do","     ( start-client $i & )","done"," # start the server"," #"," # server"," #","function kill-children-and-exit()"," {","     jobs -p |xargs kill","     exit 0"," }","trap kill-children-and-exit SIGINT"],u=["function blast-progress-cb()"," {","STEP=$1","SECSLEFTINSTEP=$2","TOTALSTEPS=$3","RATE=$4","TRIGGERED=$5","ERRORED=$6","ACTUAL_RATE=$7","PUDATA=$8",'echo "blast-progress-cb"',"echo $@",'echo ""',s," }"],d=["function blast-cb()"," {","REF=$1","UDATA=$2","PAYLOAD=`sm_dataref_tostring $1`",'[ "${PAYLOAD}" == "gimme" ] && return','echo "blast-cb"',"echo $# $*","echo $PAYLOAD",'echo ""',i," }"],h=["# this returns when done","sm_blaster_ramp_process $CSVFILE $PORT $STEPDURATION blast-cb udata blast-progress-cb pudata `echo $RAMP`"],_=c.join("\n")+"\n\n"+p.join("\n")+"\n\n"+r.join("\n")+"\n\n"+u.join("\n")+"\n\n"+d.join("\n")+"\n\n"+h.join("\n");return[_,Blockly.bash.ORDER_FUNCTION_CALL]},Blockly.bash.flow=function(e){for(var t=e.getFieldValue("NAME"),n=Blockly.bash.statementToCode(e,"Data").trim(),o=Blockly.bash.statementToCode(e,"Reaction").trim(),a=Blockly.bash.statementToCode(e,"SUCCESS_CALLBACK"),l=Blockly.bash.statementToCode(e,"FAIL_CALLBACK"),s=["BASENAME=`basename $0`",'flow_name="'+t+'"',"sm_data_add_kv sessionname:$BASENAME","CONF=../Config","REACTIONS=../Reactions","\nerr_exit()","{",'  sm_log ERROR "${BASENAME} has error on line $1"',"}","\ntrap 'err_exit $LINENO' ERR","\nsm_random_kick","sm_data_dequote_specials 1"],i=["sm_webui_open "+t,"\ncleanup()","{","    set -e","    sm_webui_status "+t+" flow_callback mydata","    sm_webui_close "+t,'    sm_log INFO "${BASENAME} done"',"}",'\ntrap "cleanup" EXIT'],c=['echo "^C to stop"','trap "break" INT','trap "break ; err_exit $LINENO" ERR',"while [ 1 ] ; do","  sm_webui_process "+t+" 5 flow_callback mydata","done"],p=[],r=["UDATA","WU_NAME","EVENT","REACTION","REACTION_NAME","STEP","COUNT"],u=0;u<r.length;u++)Blockly.getMainWorkspace().createVariable(r[u]),p.push("  "+r[u]+"=$"+(u+1));var d=["  echo $@ >> steps.txt",'  if [ "${EVENT}" == "WEBUI_CB_STEP_FAIL" ] || [ "${EVENT}" == "WEBUI_CB_FAIL" ] ; then',"    echo $@ >> FAIL.txt","  fi"],h=['  if [ "${EVENT}" == "WEBUI_CB_SUCCESS" ] ; then',a,"  fi"],_=['  if [ "${EVENT}" == "WEBUI_CB_FAIL" ] ; then',l,"  fi"],C="function flow_callback { \n"+p.join("\n")+"\n\n"+d.join("\n")+"\n\n"+h.join("\n")+"\n\n"+_.join("\n")+"\n}\n\n",m=s.join("\n")+"\n\n# Add data \n"+n+"\n\n"+i.join("\n")+"\n\n# Add reactions \n"+o+"\n\n# Callback \n"+C+"\n\n"+c.join("\n")+"\n\n";return[m,Blockly.bash.ORDER_FUNCTION_CALL]},Blockly.bash.flow_data=function(e){var t=Blockly.bash.valueToCode(e,"FILE",Blockly.bash.ORDER_ATOMIC),n="sm_data_add_file ${CONF}/"+t+"\n";return n},Blockly.bash.predefined_procedures=function(e){for(var t=e.getFieldValue("NAME"),n=[],o=0;o<e.itemCount_;o++)n.push(Blockly.bash.valueToCode(e,"ARG"+o,Blockly.bash.ORDER_COMMA)||"");var a=t+" "+n.join(" ");return["`"+a+"`",Blockly.bash.ORDER_FUNCTION_CALL]},Blockly.bash.predefined_procedures_noreturn=function(e){for(var t=e.getFieldValue("NAME"),n=[],o=0;o<e.itemCount_;o++)n.push(Blockly.bash.valueToCode(e,"ARG"+o,Blockly.bash.ORDER_COMMA)||"");var a=t+" "+n.join(" ")+"\n";return a},Blockly.bash.reaction_add=function(e){var t=Blockly.bash.valueToCode(e,"FILE",Blockly.bash.ORDER_ATOMIC),n=Blockly.bash.valueToCode(e,"GOAL",Blockly.bash.ORDER_ATOMIC),o="sm_webui_add_reaction_file $flow_name ${REACTIONS}/"+t+" "+n+"\n";return o},Blockly.bash.reaction_do=function(e){var t=Blockly.bash.valueToCode(e,"FILE",Blockly.bash.ORDER_ATOMIC),n="sm_webui_do_reaction_file $flow_name  ${REACTIONS}/"+t+" flow_callback mydata\n";return n},Blockly.bash.reaction_remove=function(e){var t=Blockly.bash.valueToCode(e,"FILE",Blockly.bash.ORDER_ATOMIC),n="sm_webui_remove_reaction $flow_name "+t+"\n";return n};